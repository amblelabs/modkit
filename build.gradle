plugins {
    id "dev.architectury.loom" version "1.10-SNAPSHOT"
    id "maven-publish"
}

apply from: 'versioning.gradle'

version = getCurrentVersion()
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        name = "Su5eD"
        url = uri("https://maven.su5ed.dev/releases")
    }
    // Scheduler, Queue, MultiDim, AutoJSON
    maven { url "https://theo.is-a.dev/maven/" }
}

loom {
    forge {
        mixinConfig 'amblekit.mixins.json', 'animation.mixins.json', 'multidim.mixins.json', 'queue.mixins.json', 'scheduler.mixins.json'
    }

    runs {
        // This adds a new gradle task that runs the datagen API
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

            runDir "build/datagen"
        }
    }
}

// Add the generated resources to the main source set
sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    forge "net.minecraftforge:forge:${project.forge_version}"
    modImplementation "dev.su5ed.sinytra.fabric-api:fabric-api:${project.fabric_version}"

    include(implementation "net.objecthunter:exp4j:0.4.8")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files, I don"t why this even works
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with sound characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.base.archivesName.get()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // exclude assets if it's a beta dev build
    if (System.hasProperty("BETA")) {
        processResources.exclude("assets")
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

tasks.processResources {
    filesMatching("*.properties") {
        expand(branch: gitBranch)
    }
}
