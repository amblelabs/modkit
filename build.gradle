import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "fabric-loom" version "1.9-SNAPSHOT"
    id "maven-publish"
    id "java"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply from: 'versioning.gradle'

version = getCurrentVersion()
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    // Scheduler, Queue, MultiDim, AutoJSON
    maven { url "https://theo.is-a.dev/maven/" }
}

tasks.named("remapJar") {
    dependsOn(tasks.named("shadowJar"))
    inputFile.set(
            tasks.named("shadowJar", ShadowJar.class)
                    .flatMap { it.archiveFile }
    )
    archiveClassifier.set("") // makes the remapped shadow jar the default artifact
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")

    runs {
        // This adds a new gradle task that runs the datagen API
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

            runDir "build/datagen"
        }
    }
}

// Add the generated resources to the main source set
sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

configurations {
    shaded
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(modApi("dev.drtheo:multidim:${project.multidim_version}"))
    include(modApi("dev.drtheo:scheduler:${project.scheduler_version}"))
    include(modApi("dev.drtheo:queue:${project.queue_version}"))
    include(modApi("maven.modrinth:animator:${project.animation_version}"))
}

shadowJar {
    configurations = [project.configurations.shaded]
    archiveClassifier.set('')
    exclude 'net/fabricmc/**'
    exclude 'org/spongepowered/asm/**'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files, I don"t why this even works
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with sound characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.base.archivesName.get()
}

jar {
    enabled = false
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // exclude assets if it's a beta dev build
    if (System.hasProperty("BETA")) {
        processResources.exclude("assets")
    }
}

artifacts {
    archives shadowJar
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

tasks.processResources {
    filesMatching("*.properties") {
        expand(branch: gitBranch)
    }
}
